test file
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
>>> print (matrix_divided([[4, 8, 6],[8, 4, 2]], 2))
[[2.0, 4.0, 3.0], [4.0, 2.0, 1.0]]


>>> print (matrix_divided([[1, 2, 3], [4, 5, 6], [7, 8, 9]], float('inf')))
[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]



#putting non int of float value
>>> print (matrix_divided([['p', 8, 6],[8, 4, 2]], 2))
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

# only list not list of list
>>> print (matrix_divided([1,2,3], 2))
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

#missing two arg
>>> print (matrix_divided())
Traceback (most recent call last):
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

#missing one arg
>>> print (matrix_divided([[7, 1, 5],[1, 2, 5]]))
Traceback (most recent call last):
TypeError: matrix_divided() missing 1 required positional argument: 'div'

#div by string
>>> print (matrix_divided([[1,2,3], [1, 2, 3]], 'op'))
Traceback (most recent call last):
TypeError: div must be a number

#division by zero
>>> print (matrix_divided([[4, 8, 6],[8, 4, 2]], 0))
Traceback (most recent call last):
ZeroDivisionError: division by zero

#different length
>>> print (matrix_divided([[4, 8],[8, 4, 2]], 2))
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size

#using float
>>> print (matrix_divided([[4.5, 8, 6],[8.8, 4, 2]], 2))
[[2.25, 4.0, 3.0], [4.4, 2.0, 1.0]]
